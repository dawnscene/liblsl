#ifndef COMMAND_SENDER_H
#define COMMAND_SENDER_H

#include "common.h"
#include "forward.h"
#include <condition_variable>
#include <mutex>
#include <thread>
#include <pugixml.hpp>

using namespace pugi;

namespace lsl {
class inlet_connection;
class stream_info_impl;

/** Internal class of an inlet to send XML-based commands to manipulate the remote streaminfo contents
 *
 * The actual communication runs in an internal background thread, while the public function
 * (command_sender::send_commands()) waits for the thread to finish.
 * The public function has an optional timeout after which it gives up, while the background thread
 * continues to do its job (so the next public-function call may succeed within the timeout).
 * The background thread terminates only if the command_sender is destroyed or the underlying
 * connection is lost or shut down.
 */
class command_sender {
public:
	/// Construct a new command sender for a given connection.
	command_sender(inlet_connection &conn);

	/// Destructor. Stops the background activities.
	~command_sender();

	/**
	 * Send commands to remote stream outlet
	 * (stream_info::info() field).
	 * @param commands XML-based commands, multiple commands may be included in one string.
	 * @param timeout Timeout of the operation (default: no timeout).
	 * @throws timeout_error (if the timeout expires), or lost_error (if the stream source has been
	 * lost).
	 */
	const stream_info_impl &send_commands(std::string commands, double timeout = FOREVER);

	std::string make_command(const std::string &command, const std::string &xpath, 
    	const std::string &name, const std::string &value, const std::string &text);

private:
	/// The command sender thread.
	void command_thread();

	/// reference to the underlying connection
	inlet_connection &conn_;

	/// background sender thread and the data generated by it
	/// send commands and parse response in the background
	std::thread command_thread_;
	/// the full stream_info_impl object (retrieved by the command sender thread)
	stream_info_impl_p fullinfo_;
	/// mutex to protect the fullinfo
	std::mutex fullinfo_mut_;
	/// condition variable to indicate that an update for the fullinfo is available
	std::condition_variable fullinfo_upd_;

	std::string commands_;
};

} // namespace lsl

#endif
